[{"content":"I\u0026rsquo;m a junior at Columbia University studying computer science. I\u0026rsquo;ve been exploring different fields of comptuer science since high school, from graphics, to full-stack webapp design, to artificial intelligence, but currently, I\u0026rsquo;m most interested in Systems Programming!\nExperience # Research Assistant at the Columbia University doing data analysis and LLM NLP Processing Full-Stack App development and web design for Columbia University Lion Dance Coursework in C, C++, UNIX, linux kernel hacking, and low-level networking Various fun projects! Education # 3.75 GPA at Columbia College, Majoring in Computer Science, Concetration in Latin American \u0026amp; Caribbean Studies Riverdale Country High School, 4 year Computer Science Curriculum Skills # C, C++, Rust, Linux Programming, Transport-Level Network maintenance, Python for data visualization and analysis, Pytorch, Pandas, BART LLM Spanish \u0026amp; Basic Mandarin ","date":"1 January 0001","permalink":"/","section":"","summary":"I\u0026rsquo;m a junior at Columbia University studying computer science.","title":""},{"content":"Operating Systems | Fall 2023 # Description # Linux Kernel Theory and Practice, important Operating System Responsibilities (Virtual addressing, Scheduling, etc)\nProjects # Process state Trace syscall Page Table state trace Syscall Filesystem implementaion Shortest-Job-First Scheduling Class Computer Networks | Fall 2023 # Description # Networking in Detail from Application Layer to Physical, Anatomy of common protocols (UDP, TCP, Https) and Modern Developments (SDN)\nProjects # Reliable chat app over UDP in C Reliable chat app over UDP in Rust, Bellman ford shortest-path simulation over UDP in Rust Advanced Programming | Fall 2022 # Description # Basics of C, Unix and introduction to Networking\nProjects: # Basic HTTP Webserver ","date":"1 January 0001","permalink":"/pages/coursework/","section":"Pages","summary":"Operating Systems | Fall 2023 # Description # Linux Kernel Theory and Practice, important Operating System Responsibilities (Virtual addressing, Scheduling, etc)","title":""},{"content":"My Projects! # As you can see, my main areas of interest just for personal projects are Productivity, Open Source, a little bit of Cryptography, and mostly Rust and C! Here\u0026rsquo;s some brief reviews of my favorite projects, but you can also take a look at my full coursework and personal projects!\nCompression By Function # For fun this January I started making a small program in Rust to encode arbitrary files as functions! It\u0026rsquo;s been really fun exploring the intersections of math and Computer Science, and collaborating with mathematicians to discover the tools and mathematical machines required to solve this problem!\nNetworking in Rust # For computer networks, I needed to do some network programming in Rust using the standard library, which was so fun! It made me realize which crates I take for granted, and gain a better understanding of the Rust sockets API.\nKernel Scheduling # For Operating Systems, me and my partner had to develop a scheduling class that beat Linux\u0026rsquo;s default scheduler. It was a really interesting probem solving issue, where I could also use some strategies I learned in Computer Networks. As always, it was also incredibly interesting to look into the Linux kernel and see how they do specific functions\nFull-Stack Development # For Columbia Lion Dance, I needed to maintain and update a webapp that a previous member had made to streamline club workflow. I learned a lot in taking on the project, and I was able to also update the project and design my own solutions!\n","date":"1 January 0001","permalink":"/projects/","section":"","summary":"My Projects!","title":""},{"content":"Welcome to my coursework page! Because these projects are for classes, the repos are private. Reach out to me if you\u0026rsquo;d like access!\nReliable Data Transfer over UDP (2 projects) # Computer Networks | C \u0026amp; Rust |\nChat app in C designed from scratch with only standard library\nStop and Wait Protocol for Reliable Data Transfer over UDP\nGroup chat and multiple user funcitonality\ntwo user chat app in Rust using standard library\nGo-Back-N Protocol for Reliable Data Transfer over UDP\nMultithreaded for simultaneous send and receive \u0026amp; non-blocking i/o\nBellman ford shortest-path simulation # Computer Networks | Rust |\nSecond part of Rust chat app. Different ports on the same network simulated a router subnet Each instance of the program sent it\u0026rsquo;s own distance vectors to other instances to find shortest path Ezfs implementaiton # Operating Systems | C |\nImplmementation of simple filesystem using Linux kernel VFS Required looking into documentation and other filesystem implementations Scheduling class! # Operating Systems | C |\nDesign a scheduler that beats Linux\u0026rsquo;s Default in terms of average completion time Design part: Thinking about how to measure completion time and minimize it Understanding why Linux doesn\u0026rsquo;t optimize for completion time Understanding and implementing scheduling class in the linux kernel ","date":"1 January 0001","permalink":"/projects/coursework/","section":"","summary":"Welcome to my coursework page!","title":""},{"content":"Personal Projects # ddmngz/CbF Compression by Function, a fun little compression project Rust 0 0 I thought it would be interesting to try compressing a file by generating a function that would produce the file on a given seed, and storing the seed and the function. This has been a really interesting vehicle to learn more about cryptography and hash functions, and I\u0026rsquo;m really excited to see how the implementation turns out!\nculiondance/culd-hub Python 0 1 I inherited CULD Hub from an old member of the Columbia University lion dance club, Ethan Wu. He made it as a tool for organizing club performances, but also as a way to learn web app development! At first, it was simply a matter of learnign the technologies, understanding the codebase, and migrating it off of Heroku, but nowadays I\u0026rsquo;ve been working on it on my own! Adding new tools such as Equipment Management, Reimbursement Automation, and an Availability Display!\nddmngz/emdash.sh CLI Productivity Dashboard null 0 0 Emdash was born from the conjuction of the desire for a bespoke, simple dashboard for productivity, fascination with TUI applications, and admiration for the design of VIM. I wanted a productivity application that encouraged use over endless reconfiguration, without sacrificing configurability. For me personality, I wanted something to parse my obsidian vault and render a dynamic dashboard, but I think generally speaking, it\u0026rsquo;s really important for producitivty tools to be configurable, because everyone\u0026rsquo;s brain works differently, so I went about generalizing it in a way that would allow other people to use it as well.\nSimpleCal (FUTURE PROJECT) # My main principle of design comes from the MIPS Assembly language. One of their main principles was \u0026ldquo;make the most common instructions the fastest.\u0026rdquo; I want to try my hand at applying that in a Calendar Application, where the two most common uses are Viewing, and adding tasks. I want to make a calendar app that\u0026rsquo;s simple, lightweight, easy to look at (and screeenshot), and easy to add tasks to\nMusescore Contribution (FUTURE PROJECT) # As a passionate jazz musician, Musescore has been essential to my development. Whether it\u0026rsquo;s transcribing solos, arranging songs for friends, or even composing my own music, Musescore has been such an incredibile reliable tool, and it consistently blows my mind that such a project is open-source. So, this january, I\u0026rsquo;m excited to start contirbuting to their codebase, so I can be a part of this incredible project!\n","date":"1 January 0001","permalink":"/projects/personal/","section":"","summary":"Personal Projects # ddmngz/CbF Compression by Function, a fun little compression project Rust 0 0 I thought it would be interesting to try compressing a file by generating a function that would produce the file on a given seed, and storing the seed and the function.","title":""},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 January 0001","permalink":"/pages/","section":"Pages","summary":"","title":"Pages"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"1 January 0001","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"}]