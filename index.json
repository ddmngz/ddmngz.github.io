[{"content":"I\u0026rsquo;m a senior at Columbia University studying computer science. I\u0026rsquo;m super into Systems Programming, but I have also been exploring different fields of computer science since high school: from graphics, to full-stack, to operating systems work, I love it all!\nExperience # Critical work at Fastly on the Varnish Team during my internship! (Details) Research Assistant at the Columbia University Systems Lab extending the Linux Kernel Coursework in C, C++, UNIX, linux kernel hacking, and low-level networking Personal projects! including a full-stack app for Columbia University Lion Dance Education # 3.75 GPA at Columbia College, Majoring in Computer Science, Concentration in Latin American \u0026amp; Caribbean Studies Riverdale Country High School, 4 year Computer Science Curriculum Skills # Rust, C, C++, Linux Programming, Transport-Level Network maintenance, Profiling \u0026amp; Optimization, Jenkins CI, Python for data visualization and analysis, Pytorch, Pandas Spanish \u0026amp; Basic Mandarin ","externalUrl":null,"permalink":"/","section":"","summary":"I\u0026rsquo;m a senior at Columbia University studying computer science.","title":"","type":"page"},{"content":" Operating Systems | Fall 2023 # Description # Linux Kernel Theory and Practice, important Operating System Responsibilities (Virtual addressing, Scheduling, etc)\nProjects # Process state Trace syscall Page Table state trace Syscall Filesystem implementation Shortest-Job-First Scheduling Class Computer Networks | Fall 2023 # Description # Networking in Detail from Application Layer to Physical, Anatomy of common protocols (UDP, TCP, Https) and Modern Developments (SDN)\nProjects # Reliable chat app over UDP in C Reliable chat app over UDP in Rust, Bellman ford shortest-path simulation over UDP in Rust Advanced Programming | Fall 2022 # Description # Basics of C, Unix and introduction to Networking\nProjects: # Basic HTTP Webserver ","externalUrl":null,"permalink":"/pages/coursework/","section":"Pages","summary":"Operating Systems | Fall 2023 # Description # Linux Kernel Theory and Practice, important Operating System Responsibilities (Virtual addressing, Scheduling, etc)","title":"","type":"pages"},{"content":" Fastly Internship | Summer 2023 # Overview # At Fastly, I optimized and helped redesign a recently ported Rust program, essential to the functionality of Fastly\u0026rsquo;s CDN. All in all, I:\nReduced memory usage by ~40% Reduced process load by ~20% Rewrote critical functions to remove unnecessary state and increase readability Profiled the program using perf + flamegraphs, coz, and strace to find expensive operations Documented the codebase with rustdoc and an internal wiki Secured supply chain dependencies with cargo-vet Skills # Working on the project taught/improved my familiarity with the following:\nIdiomatic Design for Rust Asynchronous Programming with Tokio Profiling in testing and production Performance in Rust Jenkins \u0026amp; Docker CI General Release Engineering Collaboration with my Mentor and other members of the team Weekly update meetings Documenting internal projects for developers Software Systems Lab | Spring 2023 # Overview # In my Spring semester, I was an Undergraduate Research Assistant for Jason Nieh at Columbia. This entailed the following:\nExtended Linux kernel syscalls to support experimental architecture for research project Coordinated and onboarded other Undergrads Skills # Working on a large, undocumented codebase Maintaining Communication in an Unsupervised environment Linux syscall Infastructure Writing Idiomatic C in a high-risk environment ","externalUrl":null,"permalink":"/pages/experience/","section":"Pages","summary":"Fastly Internship | Summer 2023 # Overview # At Fastly, I optimized and helped redesign a recently ported Rust program, essential to the functionality of Fastly\u0026rsquo;s CDN.","title":"","type":"pages"},{"content":" My Projects! # As you can see, my main areas of interest just for personal projects are Productivity, Open Source, a little bit of Cryptography, and mostly Rust and C! Here\u0026rsquo;s some brief reviews of my favorite projects, but you can also take a look at my full coursework and personal projects!\nLox-Rs # Over the summer, I\u0026rsquo;ve been slowly but surely cracking away at an interpreter for the Lox programming language from Robert Nystrom\u0026rsquo;s Crafting Interpreters in rust! Repo\nCompression By Function # For fun this January I started making a small program in Rust to encode arbitrary files as functions! It\u0026rsquo;s been really fun exploring the intersections of math and Computer Science, and collaborating with mathematicians to discover the tools and mathematical machines required to solve this problem!\nNetworking in Rust # For computer networks, I needed to do some network programming in Rust using the standard library, which was so fun! It made me realize which crates I take for granted, and gain a better understanding of the Rust sockets API.\nKernel Scheduling # For Operating Systems, me and my partner had to develop a scheduling class that beat Linux\u0026rsquo;s default scheduler. It was a really interesting problem solving issue, where I could also use some strategies I learned in Computer Networks. As always, it was also incredibly interesting to look into the Linux kernel and see how they do specific functions\nFull-Stack Development # For Columbia Lion Dance, I needed to maintain and update a webapp that a previous member had made to streamline club workflow. I learned a lot in taking on the project, and I was able to also update the project and design my own solutions!\n","externalUrl":null,"permalink":"/projects/","section":"","summary":"My Projects!","title":"","type":"projects"},{"content":"Welcome to my page for cool class projects! The repos are private, but feel free to reach out if you\u0026rsquo;d like access, or to discuss the work!\nReliable Data Transfer over UDP (2 projects) # Computer Networks | C \u0026amp; Rust |\nChat app in C designed from scratch with only standard library\nStop and Wait Protocol for Reliable Data Transfer over UDP\nGroup chat and multiple user functionality\ntwo user chat app in Rust using standard library\nGo-Back-N Protocol for Reliable Data Transfer over UDP\nMultithreaded for simultaneous send and receive \u0026amp; non-blocking i/o\nBellman ford shortest-path simulation # Computer Networks | Rust |\nSecond part of Rust chat app. Different ports on the same network simulated a router subnet Each instance of the program sent it\u0026rsquo;s own distance vectors to other instances to find shortest path Ezfs Implementation # Operating Systems | C |\nImplementation of simple filesystem using Linux kernel VFS Required looking into documentation and other filesystem implementations Scheduling class! # Operating Systems | C |\nDesign a scheduler that beats Linux\u0026rsquo;s Default in terms of average completion time Design part: Thinking about how to measure completion time and minimize it Understanding why Linux doesn\u0026rsquo;t optimize for completion time Understanding and implementing scheduling class in the linux kernel ","externalUrl":null,"permalink":"/projects/class_projects/","section":"","summary":"Welcome to my page for cool class projects!","title":"","type":"projects"},{"content":" Personal Projects # ddmngz/CbF Compression by Function, a fun little compression project Rust 0 0 I thought it would be interesting to try compressing a file by generating a function that would produce the file on a given seed, and storing the seed and the function. This has been a really interesting vehicle to learn more about cryptography and hash functions, and I\u0026rsquo;m really excited to see how the implementation turns out!\nculiondance/culd-hub Python 1 1 I inherited CULD Hub from an old member of the Columbia University lion dance club, Ethan Wu. He made it as a tool for organizing club performances, but also as a way to learn web app development! At first, it was simply a matter of learning the technologies, understanding the codebase, and migrating it off of Heroku, but nowadays I\u0026rsquo;ve been working on it on my own! Adding new tools such as Equipment Management, Reimbursement Automation, and an Availability Display!\nSimpleCal (FUTURE PROJECT) # My main principle of design comes from the MIPS Assembly language. One of their main principles was \u0026ldquo;make the most common instructions the fastest.\u0026rdquo; I want to try my hand at applying that in a Calendar Application, where the two most common uses are Viewing, and adding tasks. I want to make a calendar app that\u0026rsquo;s simple, lightweight, easy to look at and easier to use!\nMusescore Contribution (FUTURE PROJECT) # As a passionate jazz musician, Musescore has been essential to my development. Whether it\u0026rsquo;s transcribing solos, arranging songs for friends, or even composing my own music, Musescore has been such an incredibly reliable tool, and it consistently blows my mind that such a project is open-source. I\u0026rsquo;m super excited to start contributing to their codebase!\n","externalUrl":null,"permalink":"/projects/personal/","section":"","summary":"Personal Projects # ddmngz/CbF Compression by Function, a fun little compression project Rust 0 0 I thought it would be interesting to try compressing a file by generating a function that would produce the file on a given seed, and storing the seed and the function.","title":"","type":"projects"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/pages/","section":"Pages","summary":"","title":"Pages","type":"pages"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]